{-# LANGUAGE NoMonomorphismRestriction #-}
{-# LANGUAGE FlexibleContexts          #-}
{-# LANGUAGE TypeFamilies              #-}

import Diagrams.Prelude
import Diagrams.Backend.SVG.CmdLine

-- Define the deformation function Ï†
deform :: Double -> P2 Double -> P2 Double
deform r p@(P (V2 x y))
  | magnitudeV v >= r = p
  | otherwise         = p .+^ (scale bump (V2 (-y) x))  -- rotate + scale
  where
    v       = p .-. origin
    dist    = norm v
    t       = dist / r
    bump    = (1 - t)^2 * (1 - cos (pi * t)) -- smooth bump function

-- Draw a single vertical or horizontal grid line
gridLine :: (Double -> P2 Double) -> [Diagram B]
gridLine f = [ fromVertices $ map f [-2.5, -2.4 .. 2.5] ]

-- Build the full coordinate grid
grid :: [Diagram B]
grid = hLines ++ vLines
  where
    hLines = concat [gridLine (\x -> p2 (x, y)) | y <- [-2,-1..2]]
    vLines = concat [gridLine (\y -> p2 (x, y)) | x <- [-2,-1..2]]

-- A simple curved trajectory
trajectory :: Diagram B
trajectory = fromVertices $ map p2 [(0, -2), (0.2, -1), (0.5, 0), (0.7, 1), (0.9, 2)]
             # lw thick # lc blue

-- Apply deformation to a diagram
deformDiagram :: Double -> Diagram B -> Diagram B
deformDiagram r = transform (Deform (deform r))

-- A dashed circle showing the hole
holeBoundary :: Double -> Diagram B
holeBoundary r = circle r # lc red # dashingG [0.1,0.1] 0

-- Side-by-side diagrams
holeArgument :: Diagram B
holeArgument =
    (mconcat grid <> trajectory <> holeBoundary 1.2 # named "hole")
    ===
    (mconcat (map (deformDiagram 1.2) grid) <> deformDiagram 1.2 trajectory <> holeBoundary 1.2)
    # centerXY
    # pad 1.1

main :: IO ()
main = mainWith (holeArgument # frame 0.5)
